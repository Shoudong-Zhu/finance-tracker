// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime? // Needed by NextAuth Email provider
  image         String?   // Needed by NextAuth OAuth providers
  password      String?   // Custom field for Credentials provider
  accounts      Account[] // Needed by NextAuth OAuth providers
  sessions      Session[] // Needed by NextAuth database sessions
  transactions Transaction[] // Relation to Transaction model

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Add relations to other models later
  // transactions Transaction[]
  // budgets      Budget[]
}

// Required models for NextAuth.js Prisma Adapter
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Transaction {
  id          String          @id @default(cuid())
  amount      Decimal         @db.Decimal(10, 2) // Example: Up to 10 digits, 2 decimal places
  type        TransactionType // Enum INCOME or EXPENSE
  date        DateTime
  description String?
  category    String          // Simple category string for now
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade) // Relation back to User
}

enum TransactionType {
  INCOME
  EXPENSE
}
